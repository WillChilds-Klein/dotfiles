#!/usr/bin/env bash

# 'vag' is a script to facilitate working with multiple vagrant machines.
# It can invoke arbitrary vagrant commands, as well as a few that I've
# added below.

USAGE="USAGE: $(basename $0) [-h] COMMAND [arg1...]"

HELP="Commands:
   ids                      print the ID's of all vagrant instances (global)
   halt-all [id,..]         halt all vagrant instances except for id's listed
   destroy-all [id,..]      destroy all vagrant instances except for id's listed
   gs                       vagrant globas-status
   st                       vagrant status
   [vagrant cmd]            execute arbitrary vagrant command"

# USAGE: $ bash_arr_contains target_elt src_arr
# SOURCE: http://stackoverflow.com/a/8574392/4377800
function bash_arr_contains() {
    local e
    for e in "${@:2}"; do
        [[ "$e" == "$1" ]] && return 0
    done

    return 1
}

function vagrant_global_ids() {
    if [[ $# -gt 0 ]]; then
        echo "USAGE: vagrant_ids [-l]";
        return 1;
    fi
    $(which -s vagrant) || { echo "Vagrant is not installed!"; return 1; }

    local id_str
    idstr=$(vagrant global-status | cut -f1 -s -d ' ' | grep -e '[a-f0-9]\{7\}' | xargs)

    if [[ ${#idstr} -eq 0 ]]; then
        return 1;
    else
        echo ${idstr};
    fi
}

function vagrant_destroyall() {
    local exceptions index id_list id_regex

    echo -e "========================== DESTROYING VAGRANT MACHINES ==========================\n"

    id_list=( $(vagrant_global_ids) )
    if [[ ${#id_list[@]} -eq 0 ]]; then
        echo "No active vagrant environments!"
        return 1;
    fi

    exceptions=( "$@" )
    id_regex="^[[:xdigit:]]{7}$"
    index=0
    for except in ${exceptions[@]}; do
        if ! [[ ${except} =~ ${id_regex} ]]; then
            echo "Found invalid Vagrant ID!"
            echo "Expected: Vagrant ID as 7-digit hex num. Given: ${except}."
            echo -e "Removing ${except} from list and proceeding...\n"
            unset exceptions[$index]
            exceptions=( ${exceptions[@]} )
        else
            let index++
        fi
    done

    echo "FOUND VAGRANT MACHINE IDS IN ENV: ${id_list[@]}"
    echo -e "MACHINES TO KEEP ALIVE: ${exceptions[@]}\n"

    for vagrant_id in ${id_list[@]}; do
        if bash_arr_contains ${vagrant_id} ${exceptions[@]} ; then
            echo "Sparing ${vagrant_id} from destruction. Live long and prosper, friend."
        else
            echo "Destroying ${vagrant_id}."
            if vagrant destroy -f ${vagrant_id} ; then
                echo "${vagrant_id} has been destroyed. May they rest in peace."
            else 
                echo "Agh! A zombie! Might have failed to destroy ${vagrant_id}."
            fi
        fi
        echo
    done;

    echo "====================================== Done ======================================"
}

function vagrant_haltall() {
    local exceptions index id_list id_regex

    echo -e "============================ HALTING VAGRANT MACHINES ===========================\n"

    id_list=( $(vagrant_global_ids) )
    if [[ ${#id_list[@]} -eq 0 ]]; then
        echo "No active vagrant environments!"
        return 1;
    fi

    exceptions=( "$@" )
    id_regex="^[[:xdigit:]]{7}$"
    index=0
    for except in ${exceptions[@]}; do
        if ! [[ ${except} =~ ${id_regex} ]]; then
            echo "Found invalid Vagrant ID!"
            echo "Expected: Vagrant ID as 7-digit hex num. Given: ${except}."
            echo -e "Removing ${except} from list and proceeding...\n"
            unset exceptions[$index]
            exceptions=( ${exceptions[@]} )
        else
            let index++
        fi
    done

    echo "FOUND VAGRANT MACHINE IDS IN ENV: ${id_list[@]}"
    echo -e "MACHINES TO KEEP RUNNING: ${exceptions[@]}\n"

    for vagrant_id in ${id_list[@]}; do
        if bash_arr_contains ${vagrant_id} ${exceptions[@]} ; then
            echo "Letting ${vagrant_id} stay up late. Still running."
        else
            echo "Ssshhh time to sleep little one. Halting ${vagrant_id}."
            if vagrant halt ${vagrant_id} ; then
                echo "Nighty night. ${vagrant_id} has halted."
            else 
                echo "Damn kids. ${vagrant_id} just won't go to bed, might still be running!"
            fi
        fi
        echo
    done;

    echo "====================================== Done ======================================"
}


function main() {
    if [[ $# -lt 1 ]]; then
        echo $USAGE
        return 1
    fi
    local cmd="$1"

    if [[ $cmd = "ids" ]]; then
        vagrant_global_ids
        return $?
    elif [[ $cmd = "halt-all" ]]; then
        shift
        vagrant_haltall $@
        return $?
    elif [[ $cmd = "destroy-all" ]]; then
        shift
        vagrant_destroyall $@
        return $?
    elif [[ $cmd = "gs" ]]; then
        vagrant global-status $@
        return $?
    elif [[ $cmd = -h ]]; then
        # TODO: print help message for commands etc
        echo $HELP
    else
        vagrant $@
        return $?
    fi
}
main $@
